name: CI

on:
  push:
    branches:
      - main
      - ops/**
  pull_request:
  workflow_dispatch:

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Type check
        run: |
          python -m mypy src

      - name: Lint
        run: |
          pylint $(git ls-files '*.py') || (echo 'Pylint completed with warnings/errors'; exit 1)

      - name: Run tests with coverage
        env:
          PROJECT_ID: test-project
          REGION: us
          DOC_AI_LOCATION: us
          DOC_AI_PROCESSOR_ID: dummy
          OPENAI_API_KEY: dummy
          DRIVE_INPUT_FOLDER_ID: drive-in
          DRIVE_REPORT_FOLDER_ID: drive-out
          DRIVE_SHARED_DRIVE_ID: 0AFPP3mbSAh_oUk9PVA
          DRIVE_IMPERSONATION_USER: impersonation@example.com
          INTAKE_GCS_BUCKET: intake-bucket
          OUTPUT_GCS_BUCKET: output-bucket
          SUMMARY_BUCKET: summary-bucket
          CMEK_KEY_NAME: projects/test/locations/us/keyRings/test/cryptoKeys/test
          INTERNAL_EVENT_TOKEN: dummy
        run: |
          pytest

      - name: Configure gcloud
        if: ${{ secrets.GCP_SA_KEY != '' }}
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: quantify-agent
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Sanity check deployed service
        if: ${{ secrets.GCP_SA_KEY != '' }}
        run: |
          set -euo pipefail
          RUN_URL=$(gcloud run services describe mcc-ocr-summary --region us-central1 --format='value(status.url)')
          curl -sf "$RUN_URL/healthz"
          curl -sfG "$RUN_URL/process_drive" --data-urlencode "file_id=test"

      - name: Upload coverage (summary)
        if: always()
        run: |
            echo 'Coverage complete.'
