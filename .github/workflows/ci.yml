name: CI

on:
  push:
    branches: [main]
    tags: ["*"]
  pull_request:
    branches: [main]

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install cyclonedx-bom

      - name: Prepare artifact directory
        run: mkdir -p artifacts

      - name: Run pytest suite
        env:
          PROJECT_ID: test-project
          REGION: us
          DOC_AI_LOCATION: us
          DOC_AI_PROCESSOR_ID: processor-dummy
          DOC_AI_SPLITTER_PROCESSOR_ID: processor-split-dummy
          OPENAI_API_KEY: dummy-key
          DRIVE_INPUT_FOLDER_ID: drive-input
          DRIVE_REPORT_FOLDER_ID: drive-output
          INTAKE_GCS_BUCKET: intake-bucket
          OUTPUT_GCS_BUCKET: output-bucket
          SUMMARY_BUCKET: summary-bucket
          INTERNAL_EVENT_TOKEN: integration-token
          STUB_MODE: "true"
          USE_REFACTORED_SUMMARISER: "true"
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/mock-sa.json
          SERVICE_ACCOUNT_JSON: '{"type":"service_account","project_id":"test"}'
        run: pytest --cov=src --cov-report=term --cov-report=xml

      - name: Move coverage report
        run: |
          if [ -f coverage.xml ]; then
            mv coverage.xml artifacts/coverage.xml
          fi

      - name: Generate SBOM (CycloneDX)
        run: cyclonedx-bom pip --format json --output artifacts/sbom.json

      - name: Prepare redacted validator artifact
        run: |
          cat <<'JSON' > artifacts/validator-redacted.json
          {"ok": null, "sections_ok": null, "noise_found": null, "length": null}
          JSON

      - name: Upload PR artifacts
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@b4a5fcb36bde23e4bb7da5f96d7e7bb7b3dfe38b
        with:
          name: ci-artifacts
          path: artifacts/
          if-no-files-found: ignore

      - name: pip-audit (report only)
        if: github.event_name == 'pull_request'
        run: pip-audit -r requirements.txt || true

      - name: pip-audit (enforced)
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
        run: pip-audit -r requirements.txt

  trivy-report:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Trivy filesystem scan (report only)
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8
        with:
          scan-type: fs
          scan-ref: .
          ignore-unfixed: true
          exit-code: "0"
          severity: "CRITICAL,HIGH,MEDIUM"
          format: "table"

  trivy:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Trivy filesystem scan
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8
        with:
          scan-type: fs
          scan-ref: .
          ignore-unfixed: true
          exit-code: "1"
          severity: "CRITICAL,HIGH"
          format: "table"
