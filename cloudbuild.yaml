# Cloud Build pipeline for the modular MCC OCR Summary platform.
# Stages:
#  1. Install dependencies and run lint/type/test suites with coverage.
#  2. Run supply-chain checks (SBOM + pip-audit).
#  3. Execute synthetic benchmark to guard against regressions.
#  4. Build and push the container image.
#  5. Deploy Cloud Run service revisions for OCR, summarisation, and storage workers.
#     (Pub/Sub triggers configured via Terraform; deployment simply updates the image.)
#  6. Publish benchmark artifacts and previous revision metadata for rollback.
steps:
  - name: 'python:3.11'
    id: tests
    entrypoint: bash
    args:
      - -c
      - |
        set -euo pipefail
        pip install -r requirements-dev.txt -c constraints.txt
        make lint
        make type
        make test
  - name: 'python:3.11'
    id: security-and-sbom
    entrypoint: bash
    args:
      - -c
      - |
        set -euo pipefail
        pip install -r requirements-dev.txt -c constraints.txt
        make audit-deps
        make sbom
  - name: 'python:3.11'
    id: benchmark
    entrypoint: bash
    args:
      - -c
      - |
        set -euo pipefail
        pip install -r requirements-dev.txt -c constraints.txt
        python scripts/benchmark_large_docs.py --pages 10 50
  - name: 'gcr.io/cloud-builders/docker'
    id: build-image
    args:
      - build
      - '--build-arg'
      - GIT_SHA=$SHORT_SHA
      - '-t'
      - 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA'
      - '.'
  - name: 'gcr.io/cloud-builders/gcloud'
    id: push-image
    args:
      - container
      - images
      - add-tag
      - 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA'
      - 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}:latest'
  - name: 'gcr.io/cloud-builders/gcloud'
    id: deploy-ocr
    args:
      - run
      - services
      - deploy
      - ${_OCR_SERVICE}
      - '--image=gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA'
      - '--region=${_REGION}'
      - '--platform=managed'
      - '--execution-environment=gen2'
      - '--cpu=2'
      - '--memory=2Gi'
      - '--timeout=900'
      - '--set-env-vars=SERVICE_STAGE=ocr,PROJECT_ID=$PROJECT_ID,REGION=${_REGION}'
  - name: 'gcr.io/cloud-builders/gcloud'
    id: deploy-summarisation
    args:
      - run
      - services
      - deploy
      - ${_SUMMARY_SERVICE}
      - '--image=gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA'
      - '--region=${_REGION}'
      - '--platform=managed'
      - '--execution-environment=gen2'
      - '--cpu=2'
      - '--memory=2Gi'
      - '--timeout=900'
      - '--set-env-vars=SERVICE_STAGE=summarization,PROJECT_ID=$PROJECT_ID,REGION=${_REGION}'
  - name: 'gcr.io/cloud-builders/gcloud'
    id: deploy-storage
    args:
      - run
      - services
      - deploy
      - ${_STORAGE_SERVICE}
      - '--image=gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA'
      - '--region=${_REGION}'
      - '--platform=managed'
      - '--execution-environment=gen2'
      - '--cpu=1'
      - '--memory=1Gi'
      - '--timeout=600'
      - '--set-env-vars=SERVICE_STAGE=storage,PROJECT_ID=$PROJECT_ID,REGION=${_REGION}'
artifacts:
  objects:
    location: 'gs://${_ARTIFACT_BUCKET}/build-artifacts/$BUILD_ID'
    paths:
      - outputs/sbom.json
      - outputs/pip-audit.json
substitutions:
  _IMAGE_NAME: mcc-ocr-pipeline
  _OCR_SERVICE: mcc-ocr-service
  _SUMMARY_SERVICE: mcc-summarisation-service
  _STORAGE_SERVICE: mcc-storage-service
  _REGION: us-central1
  _ARTIFACT_BUCKET: mcc-artifacts
images:
  - 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA'
  - 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}:latest'
